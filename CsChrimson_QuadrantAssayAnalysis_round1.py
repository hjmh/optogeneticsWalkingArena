"""
Basic analysis of tracking data from CsChrimson experiments in free walking arena
Note: This script should be used for data collected using the a stimulation protocol
generated by optogeneticsProtocol_pulsedQuadrants.py
(quadrant stimulation before full-field continuous stimulation)
"""

__author__ = 'Hannah Haberkern, hjmhaberkern@gmail.com'

import csv
import os
import sys

from scipy.io import loadmat


# import custrom-written modules
from ctraxFlyTracePlots import *
from ctraxQuadrantPlots import *
from protocolParameter import *
from importCtraxData import *

# -----------------------------------------------------------------------------------------
# Load protocol parameter
# -----------------------------------------------------------------------------------------
expListFile = sys.argv[1]
print('Reading in experiment list from ' + expListFile)
if not len(sys.argv) == 2:
    print('Please provide exactly one command line argument: the path to the experiment list file (*.csv)')

# load file specifying data to be analysed
fileList = open(expListFile, 'r')
csv_fileList = csv.reader(fileList)

# get header
header = fileList.readline().split(',')

baseDirs = []
genotypes = []
experiments = []
fileNames = []
stimStartFrames = []
protocols = []
LEDintensitiesConst = []
LEDintensitiesQuad = []

for line in csv_fileList:
    baseDirs.append(line[0])
    genotypes.append(line[1])
    experiments.append(line[2])
    fileNames.append(line[3])
    stimStartFrames.append(line[4])
    protocols.append(line[5])
    LEDintensitiesConst.append(line[6])
    LEDintensitiesQuad.append(line[7])

numFiles = len(experiments)
print('Number of experiments to be analysed: ' + str(numFiles))

for fileID in range(numFiles):

    # -----------------------------------------------------------------------------------------
    # Set experiment parameter
    # -----------------------------------------------------------------------------------------
    baseDir = baseDirs[fileID]
    genotype = genotypes[fileID]
    experiment = experiments[fileID]
    fileName = fileNames[fileID]
    stimStartFrame = int(stimStartFrames[fileID])
    protocol = protocols[fileID]
    LEDintensityConst = LEDintensitiesConst[fileID]
    LEDintensityQuad = LEDintensitiesQuad[fileID]

    expName = '(' + genotype + ', ' + experiment + ')'

    plotSaveDir = baseDir + '/' + genotype + '/' + genotype + '_' + experiment + '/plots'

    print('\n Analyse data from file: ' + fileName + '\n')

    if not os.path.exists(plotSaveDir):
        os.mkdir(plotSaveDir)

    # load protocol parameter
    protocolParams = loadOptogenProtocolParameter(protocol, stimStartFrame)
    fps = protocolParams['fps']
    stimSecC = protocolParams['stimSecC']
    pauseSecC = protocolParams['pauseSecC']
    numRepeatC = protocolParams['numRepeatC']
    stimStartFrameC = protocolParams['stimStartFrameC']
    stimSecQ = protocolParams['stimSecQ']
    pauseSecQ = protocolParams['pauseSecQ']
    numRepeatQ1 = protocolParams['numRepeatQ1']
    numRepeatQ2 = protocolParams['numRepeatQ2']
    stimStartFrameQ1 = protocolParams['stimStartFrameQ1']
    stimStartFrameQ2 = protocolParams['stimStartFrameQ2']
    imageSizePx = protocolParams['imageSizePx']

    numRepeatsQ = [numRepeatQ1, numRepeatQ2]
    stimStartFramesQ = [stimStartFrameQ1, stimStartFrameQ2]

    # -----------------------------------------------------------------------------------------
    # Define masks (for the moment assume that arena is perfectly centered and
    # that quadrants are squares. Need to read in image frame and extract shapes by using edges.)

    LEDon = np.ones((imageSizePx[0] / 2, imageSizePx[1] / 2))
    LEDoff = np.zeros((imageSizePx[0] / 2, imageSizePx[1] / 2))

    # first stimulation pattern
    patternA = np.hstack((np.vstack((LEDon, LEDoff)), np.vstack((LEDoff, LEDon))))

    # second stimulation pattern
    patternB = np.hstack((np.vstack((LEDoff, LEDon)), np.vstack((LEDon, LEDoff))))

    patternFig = plt.figure()
    ax1 = patternFig.add_subplot(121)
    plt.spy(patternA)
    ax1.set_title('pattern A\n')
    ax2 = patternFig.add_subplot(122)
    plt.spy(patternB)
    ax2.set_title('pattern B\n')

    plt.close(patternFig)

    # -----------------------------------------------------------------------------------------
    # Import and rearrange data
    # -----------------------------------------------------------------------------------------

    npzFilePath = baseDir + '/' + genotype + '/' + fileName + '.npz'
    matFilePath = baseDir + '/' + genotype + '/' + genotype + '_' + experiment + '/' + fileName + '.mat'

    xPos, yPos, angle, flyID, numFrames, maxFlyID = importCtraxData(npzFilePath, matFilePath)

    # -----------------------------------------------------------------------------------------
    # Visualise tracking performance
    # -----------------------------------------------------------------------------------------

    # Reorganise fly track fragments into matrix (frame x fly id )
    flyIDperFrame = np.zeros((numFrames, maxFlyID + 1))
    for frame in range(numFrames):
        for idx in np.array(flyID[frame]).squeeze().astype('int'):
            flyIDperFrame[frame][idx] = 1

    # visualise resluting matrix
    fig = plotSparseMatrix((7, 5), 0.003, flyIDperFrame, genotype + ', ' + experiment + '\n')

    fig.savefig(plotSaveDir + '/' + fileName + '_traceFragments.pdf', format='pdf')
    plt.close(fig)

    print('Saved visualisation of tracking performance')

    # -----------------------------------------------------------------------------------------
    # Plot traces for each stimulation block
    # -----------------------------------------------------------------------------------------

    # set frameBlocks
    skipFramesOFF = 3
    skipFramesON = 3

    # continuous protocol
    beginChrContinuous = makeBeginIndexMatrix(stimStartFrameC, numRepeatC, stimSecC, pauseSecC, fps)
    endChrContinuous = makeEndIndexMatrix(stimStartFrameC, numRepeatC, stimSecC, pauseSecC, fps)
    framesToSkip = np.array([[skipFramesON, skipFramesOFF] for repeat in range(numRepeatC)])

    chrContinuousColor = np.array([['Reds', 'PuBu'] for repeat in range(numRepeatC)]).ravel()
    chrContinuous = np.vstack((beginChrContinuous.ravel(), endChrContinuous.ravel(), framesToSkip.ravel())).T

    # quadrant protocol (set1)
    beginChrQuadrant1 = makeBeginIndexMatrix(stimStartFramesQ[0], 2 * numRepeatsQ[0], stimSecQ, pauseSecQ, fps)
    endChrQuadrant1 = makeEndIndexMatrix(stimStartFramesQ[0], 2 * numRepeatsQ[0], stimSecQ, pauseSecQ, fps)
    framesToSkip = np.array(
        [[skipFramesON, skipFramesOFF] for repeat in range(2 * numRepeatsQ[0])])  # repeat = 0...2*numRepeatQ-1

    chrQuadrantColor = np.array([['Reds', 'PuBu'] for repeat in range(2 * numRepeatsQ[0])]).ravel()
    chrQuadrant1 = np.vstack((beginChrQuadrant1.ravel(), endChrQuadrant1.ravel(), framesToSkip.ravel())).T

    # quadrant protocol (set2)
    beginChrQuadrant2 = makeBeginIndexMatrix(stimStartFramesQ[1], 2 * numRepeatsQ[1], stimSecQ, pauseSecQ, fps)
    endChrQuadrant2 = makeEndIndexMatrix(stimStartFramesQ[1], 2 * numRepeatsQ[1], stimSecQ, pauseSecQ, fps)
    framesToSkip = np.array(
        [[skipFramesON, skipFramesOFF] for repeat in range(2 * numRepeatsQ[1])])  # repeat = 0...2*numRepeatQ-1

    chrQuadrantColor = np.array([['Reds', 'PuBu'] for repeat in range(2 * numRepeatsQ[1])]).ravel()
    chrQuadrant2 = np.vstack((beginChrQuadrant2.ravel(), endChrQuadrant2.ravel(), framesToSkip.ravel())).T

    # Make figures
    figC = plotStimulationBlock_timeBar(chrContinuous, xPos, yPos, chrContinuousColor,
                                        'Continuous stimulation, stimulus level ' + LEDintensityConst + '\n' + expName, (10, 10), 2)
    figC.savefig(plotSaveDir + '/' + fileName + '_continuousTrace.pdf', format='pdf')
    plt.close(figC)

    if numRepeatQ1 > 0:
        figQ1 = plotStimulationBlock_timeBar(chrQuadrant1, xPos, yPos, chrQuadrantColor,
                                             'Quadrant stimulation, set 1, stimulus level ' + LEDintensityConst + '\n' + expName, (18, 15), numRepeatQ1)
        figQ1.savefig(plotSaveDir + '/' + fileName + '_quadrantTrace_set1.pdf', format='pdf')
        plt.close(figQ1)

    if numRepeatQ2 > 0:
        figQ2 = plotStimulationBlock_timeBar(chrQuadrant2, xPos, yPos, chrQuadrantColor,
                                             'Quadrant stimulation, set 2, stimulus level ' + LEDintensityConst + '\n' + expName, (18, 15), numRepeatQ2)
        figQ2.savefig(plotSaveDir + '/' + fileName + '_quadrantTrace_set2.pdf', format='pdf')
        plt.close(figQ2)

    print('Saved traces for each stimulation block')

    # -----------------------------------------------------------------------------------------
    # Detailed traces during the quadrant trials
    # -----------------------------------------------------------------------------------------
    timeWindow = 10
    figSize = (18, 30)

    # ----------------------------------------
    fig = plt.figure(figsize=figSize)
    nRepeats = 2 * numRepeatQ1
    stimStartFrame = stimStartFrameQ1

    for quadrantRepeat in range(0, nRepeats):  # Quadrant Repeats
        startFrame = stimStartFrame + (quadrantRepeat - 1) * (stimSecQ + pauseSecQ) * fps
        # arena = plt.Circle((500,500), 485, color = 'grey')

        for i in range(2):
            # Beginning of quadrant stimulation
            frameRange = range(startFrame + (i * stimSecQ - timeWindow) * fps, startFrame + (i * stimSecQ) * fps, 6)
            titleString = str(i * stimSecQ - timeWindow) + 's to ' + str(i * stimSecQ) + 's'
            sbplt1 = fig.add_subplot(nRepeats, 4, 1 + 2 * i + quadrantRepeat * 4)
            plotQuadrantDetail(sbplt1, frameRange, flyIDperFrame, xPos, yPos, angle, flyID)

            # End of quadrant stimulation
            frameRange = range(startFrame + (i * stimSecQ) * fps, startFrame + (i * stimSecQ + timeWindow) * fps, 6)
            titleString = str(i * stimSecQ) + 's to ' + str(i * stimSecQ + timeWindow) + 's'
            sbplt2 = fig.add_subplot(nRepeats, 4, 2 + 2 * i + quadrantRepeat * 4)
            plotQuadrantDetail(sbplt2, frameRange, flyIDperFrame, xPos, yPos, angle, flyID)

            # Add light ON indicators
            if i == 0:
                addQuadrantLightIndicator(sbplt2, imageSizePx, quadrantRepeat)
                sbplt1.set_ylabel('Quadrant stimulation #' + str(quadrantRepeat + 1) + '\n' + str(stimSecQ)
                                  + 's on, ' + str(pauseSecQ) + 's off, intensity level ' + LEDintensityQuad + '%, protocol ' + protocol + '\n' + expName,
                                  fontsize=16)
            else:
                addQuadrantLightIndicator(sbplt1, imageSizePx, quadrantRepeat)

    if numRepeatQ1 > 0:
        fig.tight_layout()
        fig.savefig(plotSaveDir + '/' + fileName + '_QuadrantStimDetail_set1.pdf', format='pdf')
        plt.close(fig)

    # ----------------------------------------
    fig = plt.figure(figsize=figSize)
    nRepeats = 2 * numRepeatQ2
    stimStartFrame = stimStartFrameQ2

    for quadrantRepeat in range(0, nRepeats):  # Quadrant Repeats
        startFrame = stimStartFrame + (quadrantRepeat - 1) * (stimSecQ + pauseSecQ) * fps
        # arena = plt.Circle((500,500), 485, color = 'grey')

        for i in range(2):
            # Beginning of quadrant stimulation
            frameRange = range(startFrame + (i * stimSecQ - timeWindow) * fps, startFrame + (i * stimSecQ) * fps, 6)
            titleString = str(i * stimSecQ - timeWindow) + 's to ' + str(i * stimSecQ) + 's'
            subplt1 = fig.add_subplot(nRepeats, 4, 1 + 2 * i + quadrantRepeat * 4)
            plotQuadrantDetail(subplt1, titleString, frameRange, flyIDperFrame, xPos, yPos, angle, flyID)

            # End of quadrant stimulation
            frameRange = range(startFrame + (i * stimSecQ) * fps, startFrame + (i * stimSecQ + timeWindow) * fps, 6)
            titleString = str(i * stimSecQ) + 's to ' + str(i * stimSecQ + timeWindow) + 's'
            subplt2 = fig.add_subplot(nRepeats, 4, 2 + 2 * i + quadrantRepeat * 4)
            plotQuadrantDetail(subplt2, titleString, frameRange, flyIDperFrame, xPos, yPos, angle, flyID)

            # Add light ON indicators
            if i == 0:
                addQuadrantLightIndicator(subplt2, imageSizePx, quadrantRepeat)
                subplt1.set_ylabel('Quadrant stimulation #' + str(quadrantRepeat + 1) + '\n' + str(stimSecQ) +
                                   's on, ' + str(pauseSecQ) + 's off, intensity level ' + LEDintensityQuad + '%, protocol ' + protocol + '\n' + expName,
                                   fontsize=16)
            else:
                addQuadrantLightIndicator(subplt1, imageSizePx, quadrantRepeat)

    if numRepeatQ2 > 0:
        fig.tight_layout()
        fig.savefig(plotSaveDir + '/' + fileName + '_QuadrantStimDetail_set2.pdf', format='pdf')
        plt.close(fig)

    print('Saved detailed traces during the quadrant trials')

    # -----------------------------------------------------------------------------------------
    # Fraction of flies in illuminated quadrants
    # -----------------------------------------------------------------------------------------

    for stimSet in range(2):
        numQuadRepeat = 2 * numRepeatsQ[stimSet]
        if numQuadRepeat == 0:
            continue

        quadFractionFig = plt.figure(figsize=(12, 3))

        for quadrantRepeat in range(numQuadRepeat):
            startFrame = stimStartFramesQ[stimSet] + quadrantRepeat * (stimSecQ + pauseSecQ) * fps
            frameRange = range(startFrame, startFrame + stimSecQ * fps, 30)

            plotFractionFlyInOn(quadFractionFig, frameRange, stimSecQ, quadrantRepeat, patternA, patternB, xPos, yPos,
                                imageSizePx, numQuadRepeat)

        quadFractionFig.suptitle('Quadrant set ' + str(stimSet + 1) + ', LED intensity level ' + LEDintensityQuad + '%, protocol ' + protocol + '\n', fontsize=14)
        quadFractionFig.tight_layout()
        quadFractionFig.savefig(plotSaveDir + '/' + fileName + '_fractionInLEDon_quadrantSet' + str(stimSet + 1)
                                + '.pdf', format='pdf')
        plt.close(quadFractionFig)

    print('Saved fraction of flies in ON quadrants plot')

print('Analysis run successfully')
